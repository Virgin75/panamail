# Generated by Django 4.2 on 2023-06-03 14:07

import uuid

import django.contrib.postgres.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Condition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('basic_field', models.CharField(blank=True, choices=[('EMAIL', 'Email'), ('FIRST_NAME', 'First name'), ('LAST_NAME', 'Last name')], max_length=20, null=True)),
                ('event', models.CharField(blank=True, max_length=100, null=True)),
                ('page', models.CharField(blank=True, max_length=100, null=True)),
                ('condition_type', models.CharField(blank=True, choices=[('BASIC FIELD', 'Contact basic fields ... <input_value>'), ('CUSTOM FIELD', 'Contact <custom_field> ... <input_value>'), ('LIST', 'Contact is in list <input_value>'), ('EVENT', 'Contact has triggered event <input_value>'), ('PAGE', 'Contact has viewed page <input_value>')], max_length=20, null=True)),
                ('check_type', models.CharField(blank=True, choices=[('IS', 'is exactly // has been performed // has been viewed'), ('IS NOT', 'is not'), ('CONTAINS', 'contains'), ('DOES NOT CONTAIN', 'does not contain'), ('IS EMPTY', 'empty'), ('IS NOT EMPTY', 'not empty'), ('EQUALS', 'equals'), ('SUPERIOR', 'superior'), ('SUPOREQUALS', 'superior or equals'), ('INFERIOR', 'inferior'), ('INFOREQUALS', 'inferior or equals'), ('IS TRUE', 'is true'), ('IS FALSE', 'is false'), ('AT', 'At this date'), ('BEFORE', 'Before this date'), ('AFTER', 'After this date'), ('LASTDAYS', 'In the last... days'), ('BETWEEN', 'Between ... and ...')], max_length=20, null=True)),
                ('input_value', models.TextField(blank=True, null=True)),
                ('input_value2', models.TextField(blank=True, null=True)),
                ('check_period', models.CharField(blank=True, choices=[('EVER', 'Ever'), ('AT', 'At this date'), ('BEFORE', 'Before this date'), ('AFTER', 'After this date'), ('LAST', 'In the last...'), ('BETWEEN', 'Between ... and ...')], max_length=20, null=True)),
                ('input_at_least', models.IntegerField(blank=True, null=True)),
                ('in_last_x_days', models.IntegerField(blank=True, null=True)),
                ('input_date1', models.DateField(blank=True, null=True)),
                ('input_date2', models.DateField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Segment Conditions',
            },
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.CharField(max_length=250)),
                ('first_name', models.CharField(blank=True, max_length=100, null=True)),
                ('last_name', models.CharField(blank=True, max_length=100, null=True)),
                ('transac_email_status', models.CharField(choices=[('SUB', 'Subscribed'), ('UNSUB', 'Unsbiscribed')], default='SUB', max_length=5)),
                ('manual_email_status', models.CharField(choices=[('SUB', 'Subscribed'), ('UNSUB', 'Unsbiscribed')], default='SUB', max_length=5)),
            ],
        ),
        migrations.CreateModel(
            name='ContactInList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('double_optin_token', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('double_optin_validate_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Relations Contact <> List',
            },
        ),
        migrations.CreateModel(
            name='ContactInListHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('date', models.DateTimeField()),
                ('total_contacts', models.IntegerField()),
            ],
            options={
                'verbose_name_plural': 'Contact In List History',
            },
        ),
        migrations.CreateModel(
            name='ContactInSegment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Relations Contact <> Segment',
            },
        ),
        migrations.CreateModel(
            name='ContactInSegmentHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('date', models.DateTimeField()),
                ('total_contacts', models.IntegerField()),
            ],
            options={
                'verbose_name_plural': 'Contact In Segment History',
            },
        ),
        migrations.CreateModel(
            name='CSVImportHistory',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nb_created', models.IntegerField(blank=True, null=True)),
                ('nb_updated', models.IntegerField(blank=True, null=True)),
                ('nb_errors', models.IntegerField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('file_name', models.CharField(blank=True, max_length=250, null=True)),
                ('file', models.BinaryField(blank=True, null=True)),
                ('update_existing', models.BooleanField(default=False)),
                ('mass_unsubscribe', models.BooleanField(default=False)),
                ('mapping', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=250), blank=True, null=True, size=None)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CustomField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('type', models.CharField(choices=[('str', 'String'), ('int', 'Integer'), ('bool', 'Boolean'), ('date', 'Date')], max_length=4)),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name_plural': 'Custom Fields',
            },
        ),
        migrations.CreateModel(
            name='CustomFieldOfContact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('value_str', models.TextField(blank=True, null=True)),
                ('value_int', models.IntegerField(blank=True, null=True)),
                ('value_bool', models.BooleanField(blank=True, null=True)),
                ('value_date', models.DateField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Relations Contact <> Custom Field',
            },
        ),
        migrations.CreateModel(
            name='DatabaseRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query', models.TextField()),
                ('column_mapping', models.TextField(null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='DatabaseToSync',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('PG', 'PostgreSQL'), ('MY', 'MySQL')], max_length=2)),
                ('db_host', models.CharField(max_length=55)),
                ('db_port', models.CharField(blank=True, max_length=5, null=True)),
                ('db_name', models.CharField(max_length=55)),
                ('db_user', models.CharField(max_length=55)),
                ('db_password', models.CharField(max_length=250)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Databases to sync',
            },
        ),
        migrations.CreateModel(
            name='GroupOfConditions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('operator', models.CharField(choices=[('AND', 'And'), ('OR', 'Or')], default='AND', max_length=3)),
            ],
            options={
                'verbose_name_plural': 'Group Conditions',
            },
        ),
        migrations.CreateModel(
            name='List',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('optin_choice', models.CharField(choices=[('double', 'Double Opt-in'), ('single', 'Single Opt-in')], default='single', max_length=10)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Segment',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('operator', models.CharField(choices=[('AND', 'And'), ('OR', 'Or')], default='AND', max_length=3)),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
